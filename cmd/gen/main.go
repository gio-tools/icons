package main

import (
	"fmt"
	"log"
	"os"
	"sort"
	"strings"

	"github.com/fatih/camelcase"
	"golang.org/x/tools/go/packages"
)

func readAndSortNames() ([]string, error) {
	names := make([]string, 0, 1000)
	cfg := packages.Config{
		Mode: packages.NeedTypes | packages.NeedSyntax,
	}
	pkgs, err := packages.Load(&cfg, "golang.org/x/exp/shiny/materialdesign/icons")
	if err != nil {
		return nil, fmt.Errorf("loading icons package: %w", err)
	}
	iconsPkg := pkgs[0]
	for _, f := range iconsPkg.Syntax {
		for _, obj := range f.Scope.Objects {
			names = append(names, obj.Name)
		}
	}
	sort.Strings(names)
	return names, nil
}

const basePkgSrcHeader = `// generated by go run cmd/gen/main.go. DO NOT EDIT

package icons

import "golang.org/x/exp/shiny/materialdesign/icons"

var (
`

func genBasePkgData(names []string) error {
	out, err := os.OpenFile("./data.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return fmt.Errorf("opening out file: %v", err)
	}
	defer out.Close()

	nameWidth := 0
	for _, name := range names {
		if n := len(name); n > nameWidth {
			nameWidth = n
		}
	}

	if _, err = fmt.Fprint(out, basePkgSrcHeader); err != nil {
		return fmt.Errorf("writing source header: %v", err)
	}
	for _, name := range names {
		fmt.Fprintf(out, "\t%-*s = mi(icons.%s)\n", nameWidth, name, name)
	}
	if _, err = out.WriteString(")\n"); err != nil {
		return fmt.Errorf("writing last parenthesis: %v", err)
	}

	return nil
}

const browserSrcHeader = `// generated by go run cmd/gen/main.go. DO NOT EDIT

package main

import "gio.tools/icons"

const numEntries = %d

var allEntries = [%d]iconEntry{
`

func genBrowserData(names []string) error {
	out, err := os.OpenFile("./cmd/gio-icon-browser/data.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0o644)
	if err != nil {
		return fmt.Errorf("opening out file: %v", err)
	}
	defer out.Close()

	count := len(names)
	if _, err = fmt.Fprintf(out, browserSrcHeader, count, count); err != nil {
		return fmt.Errorf("writing source header: %v", err)
	}
	for _, name := range names {
		nameWithSpaces := strings.Join(camelcase.Split(name), " ")
		fmt.Fprintf(out, "\t{%q, %q, %q, icons.%s},\n", nameWithSpaces, name, strings.ToLower(name), name)
	}
	if _, err = out.WriteString("}\n"); err != nil {
		return fmt.Errorf("writing last curly bracket: %v", err)
	}

	return nil
}

func main() {
	names, err := readAndSortNames()
	if err != nil {
		log.Fatalf("error: reading and sorting icon names: %v", err)
	}

	if err = genBasePkgData(names); err != nil {
		log.Fatalf("error: generating base pkg data: %v", err)
	}

	if err = genBrowserData(names); err != nil {
		log.Fatalf("error: generating browser data: %v", err)
	}
}
